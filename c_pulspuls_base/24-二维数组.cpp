#include <iostream>
using namespace std;
int main()
{
	// 定义arr为3行4列的数组
	int arr[3][4] =
	{
		{10,20,30,40},
		{20,30,40,50},
		{30,40,50,60}
	};
	
	// 二维数组初始化的方式
	int arr1[2][3] = { 10,20,30,40,50,60 };

	//  二维数组初始化元素个数不等于元素的长度
	// 如果元素个数少于数组长度，会在结尾补0（前提是int类型的数组）
	int arr2[2][3] = { 10,20,30,40 };
	int arr3[2][3] =
	{
		{10,20},
		{30,40}
	};

	// 如果数字的个数超过数组长度，会直接报错
	// int arr4[2][3] = { 10,20,30,40,50,60,70 };
	// 如何遍历二维数组中的所有元素值
	// 利用双层for循环来输出二维数组元素
	//for (int i = 0; i < 2; i++)
	//{
	//	for (int j = 0; j < 3; j++)
	//	{
	//		cout << "arr3[" << i << "][" << j << "] = " << arr3[i][j] << " ";
	//	}
	//	cout << endl;
	//}

	

	// 练习：处理学生的多门成绩
	// 输入每个学生的语文和数学成绩，计算每个学生的总成绩，输入的时候要提示正在输入的是第几个学生的哪一门成绩
	//int arr10[3][2], sum = 0;
	//for (int i = 0; i < 3; i++)
	//{
	//	cout << "正在输入第" << i + 1 << "个学生的语文成绩：";
	//	cin >> arr10[i][0];
	//	cout << "正在输入第" << i + 1 << "个学生的数学成绩：";
	//	cin >> arr10[i][1];
	//}

	//for (int i = 0; i < 3; i++)
	//{
	//	cout << "第" << i + 1 << "个学生的总成绩是：" << arr10[i][0] + arr10[i][1] << endl;
	//}

	// 获取二维数组的列数和行数
	// { {123}, { 456 }};
	//// 二维数组的行数
	//cout << sizeof(arr2) / sizeof(arr2[0]) << endl;
	//// 二维数组的列数
	//cout << sizeof(arr2[0]) / sizeof(arr2[0][0]) << endl;


	//// 1、将两个矩形的值相加赋值给一个新的矩形
	//int a[3][4] = { 10,20,30,40,50,60,70,80,90,100,110,120 };
	//int b[3][4] = { 11,12,13,14,15,16,17,18,19,20,21,22 };
	//int c[3][4];
	//for (int i = 0; i < 3; i++)
	//{
	//	for (int j = 0; j < 4; j++)
	//	{
	//		// 核心点：三个矩形的下标是同时变化的
	//		c[i][j] = a[i][j] + b[i][j];
	//	}
	//}

	//for (int i = 0; i < 3; i++)
	//{
	//	for (int j = 0; j < 4; j++)
	//	{
	//		cout << c[i][j] << " ";
	//	}
	//	cout << endl;
	//}

	// 2、计算一个4×4正方形中主对角线中的最大值
	// 获取主对角线的元素的核心是：主对角线的行下标和列下标相同
	int arr4[4][4] =
	{
		{10,20,30,40},
		{20,300,40,50},
		{30,40,50,60},
		{40,50,60,70}
	};

	int max = arr4[0][0]; // max里面保存的是最大值
	for (int i = 0; i < 4; i++)
	{
		// 如果遍历出来的元素比max中保存的元素还要大，就将该值赋值给max即可
		if (arr4[i][i] > max)
		{
			max = arr4[i][i];
		}
	}
	cout << "max = " << max << endl;
	return 0;
}